import { default as axios } from "axios";
import { faker } from "@faker-js/faker";
// import { createHash } from "crypto";

export interface Alias {
  // id that mailcow assigns alias
  id: number;
  // domain of alias
  domain: string;
  targetAddress: string;
  address: string;
  active: boolean;
  created: Date;
  modified: Date;
  // hash of site
  siteHash: string;
}

enum GenerationMethod {
  RandomCharacters = 0,
  RandomName = 1,
  WebsiteURL = 2,
}

export interface Settings {
  host?: string;
  apiKey?: string;
  forwardAddress?: string;
  aliasDomain?: string;
  generationMethod: GenerationMethod;
}

interface FetchAliasData {
  id: number;
  domain: string;
  // private comment includes the site hash and will start with aliasextension_ if it was generated by this extension
  private_comment: string;
  // target address
  goto: string;
  // alias address
  address: string;
  active: number;
  active_int: number;
  created: string;
  // modified will be null if the alias has never been modified
  modified: string | null;
}

export async function generateAlias(
  settings: Required<Settings>,
  hostname?: string
): Promise<Alias> {
  const address = generateEmail(settings, hostname);
  const hash = await generateHash(hostname);
  // although mailcow has its own date, the format they use sucks
  const createdAt = Date.now();

  // first in msg array should be "alias_added", second is the address, third is the id as a string
  const { data } = await axios.post<[{ type: string; msg: string[] }]>(
    `${settings.host}/api/v1/add/alias`,
    {
      address,
      goto: settings.forwardAddress,
      // change the number depending on the version of the extension, this is to prevent conflicts with breaking changes
      private_comment: `aliasaddon_1_${hash}_${createdAt}`,
    }
  );

  if (data[0].type !== "success") {
    throw new Error("Failed to generate alias");
  }

  // we need to fetch the alias again to get the creation date because mailcow doesn't return it
  // const alias = await axios.get<FetchAliasData>(
  //   `${settings.host}/api/v1/get/alias/${data[0].msg[2]}`,
  //   {
  //     headers: {
  //       "X-API-Key": settings.apiKey,
  //     },
  //   }
  // );

  return {
    id: parseInt(data[0].msg[2]),
    domain: settings.aliasDomain,
    targetAddress: settings.apiKey,
    address,
    active: true,
    // mailcow doesn't return a valid js date for some reason (https://github.com/mailcow/mailcow-dockerized/issues/4876)
    created: new Date(createdAt),
    modified: null,
    siteHash: hash,
  };
}

export async function fetchDomains(
  settings: Required<Settings>
): Promise<string[]> {
  const { data } = await axios.get<
    {
      domain_name: string;
      aliases_left: number;
      active: number;
      active_int: number;
    }[]
  >(`${settings.host}/api/v1/get/domain/all`, {
    headers: {
      "X-API-Key": settings.apiKey,
    },
    timeout: 5000,
  });

  return data
    .filter(
      (domain) => domain.active === domain.active_int && domain.aliases_left > 0
    )
    .map((domain) => domain.domain_name);
}

export async function fetchAliases(
  settings: Required<Settings>
): Promise<Alias[]> {
  const { data } = await axios.get<FetchAliasData[]>(
    `${settings.host}/api/v1/get/alias/all`,
    {
      headers: {
        "X-API-Key": settings.apiKey,
      },
    }
  );

  return data
    .filter(
      // make sure alias is active and was generated by this extension
      (alias) => alias.private_comment.startsWith("aliasaddon_")
    )
    .map((alias) => {
      return {
        id: alias.id,
        domain: alias.domain,
        targetAddress: alias.goto,
        address: alias.address,
        active: alias.active === alias.active_int,
        created: new Date(`${alias.created}.000Z`),
        modified: alias.modified ? new Date(`${alias.modified}.000Z`) : null,
        siteHash: alias.private_comment.split("_")[1],
      };
    });
}

export async function updateAlias(
  id: number,
  settings: Settings,
  active: 0 | 1
): Promise<boolean> {
  const { data } = await axios.post(
    `${settings.host}/api/v1/edit/alias/${id}`,
    {
      attr: { active, items: [id] },
    },
    {
      headers: {
        "X-API-Key": settings.apiKey,
      },
    }
  );
  return data[0].type === "success";
}

// export function generateHash(data: string) {
// 	return createHash("sha256").update(data).digest("hex");
// }

export async function generateHash(data: string) {
  return Array.from(
    new Uint8Array(
      await crypto.subtle.digest("SHA-256", new TextEncoder().encode(data))
    )
  )
    .map((bytes) => bytes.toString(16).padStart(2, "0"))
    .join("");
}

export function generateEmail(
  settings: Required<Settings>,
  hostname?: string
): string {
  switch (settings.generationMethod) {
    case GenerationMethod.RandomCharacters:
      return `${faker.random.alphaNumeric(16)}@${settings.aliasDomain}`;

    case GenerationMethod.RandomName:
      return faker.internet.email(
        faker.name.firstName(),
        faker.name.lastName(),
        settings.aliasDomain
      );

    case GenerationMethod.WebsiteURL:
      return `${hostname.replace(".", "_")}_${faker.random.numeric(3)}@${
        settings.aliasDomain
      }`;
  }
}
