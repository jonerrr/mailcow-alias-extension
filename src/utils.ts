import { default as axios } from "axios";
import { faker } from "@faker-js/faker";
import { createHash } from "crypto";
export interface Alias {
	// id that mailcow assigns alias
	id: number;
	// domain of alias
	domain: string;
	targetAddress: string;
	aliasAddress: string;
	// 0 is disabled, 1 is enabled
	active: number;
	created: Date;
	modified: Date;
	// hash of site
	siteHash: string;
}

enum GenerationMethod {
	RandomCharacters = 0,
	RandomName = 1,
	WebsiteURL = 2,
}

export interface Settings {
	host: string;
	apiKey: string;
	forwardAddress: string;
	aliasDomain: string;
	generationMethod: GenerationMethod;
}

interface FetchAliasData {
	id: number;
	domain: string;
	// private comment includes the site hash and will start with aliasextension_ if it was generated by this extension
	private_comment: string;
	// target address
	goto: string;
	// alias address
	address: string;
	active: number;
	active_int: number;
	created: string;
	// modified will be null if the alias has never been modified
	modified: string | null;
}

export async function fetchAliases(settings: Settings): Promise<Alias[]> {
	const response = await axios.get<FetchAliasData[]>(
		`${settings.host}/api/v1/get/alias/all`,
		{
			headers: {
				"X-API-Key": settings.apiKey,
			},
		},
	);

	return response.data
		.filter(
			// make sure alias is active and was generated by this extension
			(alias) =>
				alias.active === alias.active_int &&
				alias.private_comment.startsWith("aliasextension_"),
		)
		.map((alias) => {
			return {
				id: alias.id,
				domain: alias.domain,
				targetAddress: alias.goto,
				aliasAddress: alias.address,
				active: alias.active,
				created: new Date(alias.created),
				modified: alias.modified ? new Date(alias.modified) : null,
				siteHash: alias.private_comment.split("_")[1],
			};
		});
}

export function generateHash(data: string) {
	return createHash("sha256").update(data).digest("hex");
}

export function generateEmail(settings: Settings, hostname: string): string {
	switch (settings.generationMethod) {
		case GenerationMethod.RandomCharacters:
			return `${faker.random.alphaNumeric(10)}@${settings.aliasDomain}`;
		case GenerationMethod.RandomName:
			return faker.internet.email(
				faker.name.firstName(),
				faker.name.lastName(),
				settings.aliasDomain,
			);
		case GenerationMethod.WebsiteURL:
			return `${hostname}@${settings.aliasDomain}`;
	}
}
